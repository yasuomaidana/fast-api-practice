"""Adding

Revision ID: 8f93fa6d0f75
Revises: 32a8e8d8c2ea
Create Date: 2025-03-27 11:49:36.638732

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

import sqlmodel
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8f93fa6d0f75'
down_revision: Union[str, None] = '32a8e8d8c2ea'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('ADMIN', 'USER', name='roletype').create(op.get_bind())
    sa.Enum('READ_INVOICE', 'CREATE_INVOICE', 'UPDATE_INVOICE', 'DELETE_INVOICE', name='permissiontype').create(
        op.get_bind())
    op.create_table('account',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('email'),
                    sa.UniqueConstraint('username')
                    )
    op.create_table('permission',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('permission',
                              postgresql.ENUM('READ_INVOICE', 'CREATE_INVOICE', 'UPDATE_INVOICE', 'DELETE_INVOICE',
                                              name='permissiontype', create_type=False), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('role',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('role', postgresql.ENUM('ADMIN', 'USER', name='roletype', create_type=False),
                              nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('account_role',
                    sa.Column('account_id', sa.Integer(), nullable=False),
                    sa.Column('role_id', sa.Integer(), nullable=False),
                    sa.Column('enabled', sa.Boolean(), nullable=False),
                    sa.ForeignKeyConstraint(['account_id'], ['account.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
                    sa.PrimaryKeyConstraint('account_id', 'role_id'),
                    sa.UniqueConstraint('account_id', 'role_id')
                    )
    op.create_table('role_permission',
                    sa.Column('role_id', sa.Integer(), nullable=False),
                    sa.Column('permission_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['permission_id'], ['permission.id'], ),
                    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
                    sa.PrimaryKeyConstraint('role_id', 'permission_id'),
                    sa.UniqueConstraint('role_id', 'permission_id')
                    )
    op.drop_constraint('product_productNameId_fkey', 'product', type_='foreignkey')
    op.drop_table('product_name')
    op.execute("""
        DELETE FROM place
        WHERE ctid NOT IN (
            SELECT min(ctid)
            FROM place
            GROUP BY name, place_type
        )
    """)
    op.create_unique_constraint(None, 'place', ['name', 'place_type'])
    op.add_column('product', sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False))
    op.create_unique_constraint(None, 'product', ['name', 'productType'])
    op.drop_column('product', 'productNameId')
    op.drop_column('product', 'price')
    op.add_column('purchased_item', sa.Column('price', sa.Integer(), nullable=False))
    op.drop_column('purchased_item', 'quantity')
    op.sync_enum_values(
        enum_schema='public',
        enum_name='placetype',
        new_values=['BAR', 'RESTAURANT', 'HOTEL', 'CONVENIENCE_STORE', 'GOVERNMENT', 'HOSPITAL', 'STORE', 'SCHOOL',
                    'PHARMACY', 'CINEMA'],
        affected_columns=[TableReference(table_schema='public', table_name='place', column_name='place_type')],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema='public',
        enum_name='placetype',
        new_values=['BAR', 'RESTAURANT', 'HOTEL', 'CONVENIENCE_STORE', 'GOVERNMENT', 'HOSPITAL', 'STORE', 'SCHOOL',
                    'PHARMACY'],
        affected_columns=[TableReference(table_schema='public', table_name='place', column_name='place_type')],
        enum_values_to_rename=[],
    )
    op.add_column('purchased_item', sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_column('purchased_item', 'price')
    op.add_column('product', sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('product', sa.Column('productNameId', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key('product_productNameId_fkey', 'product', 'product_name', ['productNameId'], ['id'])
    op.drop_constraint(None, 'product', type_='unique')
    op.drop_column('product', 'name')
    op.drop_constraint(None, 'place', type_='unique')
    op.create_table('product_name',
                    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
                    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
                    sa.PrimaryKeyConstraint('id', name='product_name_pkey')
                    )
    op.drop_table('role_permission')
    op.drop_table('account_role')
    op.drop_table('role')
    op.drop_table('permission')
    op.drop_table('account')
    sa.Enum('READ_INVOICE', 'CREATE_INVOICE', 'UPDATE_INVOICE', 'DELETE_INVOICE', name='permissiontype').drop(
        op.get_bind())
    sa.Enum('ADMIN', 'USER', name='roletype').drop(op.get_bind())
    # ### end Alembic commands ###
